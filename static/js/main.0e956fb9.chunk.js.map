{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["styles","outerDiv","backgroundColor","minHeight","padding","App","useState","beatsPerMinute","setBeatsPerMinute","playing","setPlaying","moment","timePlayWasClicked","setTimePlayWasClicked","currentTime","setCurrentTime","setInterval","console","log","className","style","map","note","index","diff","type","value","onChange","e","target","paddingTop","classNamme","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAQMA,EAAS,CACbC,SAAU,CACRC,gBAAiB,WACjBC,UAAW,QACXC,QAAS,SAgGEC,MA7Ff,WAGE,MAA4CC,mBAAS,KAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAoDJ,mBAASK,OAA7D,mBAAOC,EAAP,KAA2BC,EAA3B,KACA,EAAsCP,mBAASK,OAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAwBA,OApBAC,aAAY,YACM,IAAZP,IACFQ,QAAQC,IAAIJ,GACZC,EAAeJ,UAEhB,IAgBD,sBAAKQ,UAAU,qBAAqBC,MAAQpB,EAAOC,SAAnD,UACE,qBAAKkB,UAAU,uBAAf,SAxBkB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAyB5OE,KAAI,SAACC,EAAMC,GACzB,OACE,qBAAKJ,UAAU,cAAf,SACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAWL,EAAYU,KAAKZ,GAAuB,IAAMW,EAAMhB,GAAmBO,EAAYU,KAAKZ,GAAuB,KAAOW,EAAM,GAAGhB,EAAkB,QAAS,GAAzK,SAAgLe,OAFlJC,QASxC,qBAAKJ,UAAU,YAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,qBAAKA,UAAU,wBAAf,SACE,uBAAOA,UAAU,QAAjB,mBAEF,qBAAKA,UAAU,aAAf,SACE,qBAAKA,UAAU,QAAf,SACE,mBAAGA,UAAU,UAAb,SACA,uBACEM,KAAK,OACLN,UAAU,QACVO,MAAQnB,EACRoB,SAAU,SAAAC,GAAKpB,EAAkBoB,EAAEC,OAAOH,qBASpD,qBAAKP,UAAU,YAAYC,MAAO,CAACU,WAAY,QAA/C,SACE,sBAAKC,WAAW,UAAhB,UACE,qBAAKZ,UAAU,UAAf,SACE,wBACEA,UAAU,oBACVa,QAAS,kBAnDnBtB,GAAYD,QACZI,EAAsBF,QAgDd,SAGGF,EACC,yCAEA,4CAIN,qBAAKU,UAAU,UAAf,SACE,wBACEA,UAAU,iBACVa,QAAS,kBAzDnBf,QAAQC,IAAI,eACZR,GAAW,GACXG,EAAsBF,YACtBI,EAAeJ,QAoDP,SAGI,wDCrFDsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0e956fb9.chunk.js","sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\nimport {\n  useState,  \n  // useEffect,\n} from 'react';\nimport 'bulma/css/bulma.min.css';\nimport moment from 'moment';\nconst styles = {\n  outerDiv: {\n    backgroundColor: 'darkgray',\n    minHeight: '100vh',\n    padding: '1rem',\n  }\n}\nfunction App() {\n\n  // const [count, setCount] = useState(0);\n  const [beatsPerMinute, setBeatsPerMinute] = useState(120);\n  const [playing, setPlaying] = useState(false);\n  const [timePlayWasClicked, setTimePlayWasClicked] = useState(moment());\n  const [currentTime, setCurrentTime] = useState(moment());\n\n  const notesSequence = ['A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D'];\n\n  setInterval(() => {   \n    if (playing === true) {\n      console.log(currentTime);\n      setCurrentTime(moment());\n    }\n  }, 20)\n\n\n  const handleClickPlay = () => {\n    setPlaying(!playing);\n    setTimePlayWasClicked(moment());\n  }\n\n  const handleClickReset = () => {\n    console.log(\"click reset\");\n    setPlaying(false);\n    setTimePlayWasClicked(moment());\n    setCurrentTime(moment());\n  }\n \n  return (\n    <div className=\"container is-fluid\" style={ styles.outerDiv }>\n      <div className=\"columns is-multiline\">\n        { notesSequence.map((note, index) => {\n          return (\n            <div className=\"column is-1\" key={index}>\n              <div className=\"box\">\n                <h1 className={currentTime.diff(timePlayWasClicked) > (60000*index/beatsPerMinute) && currentTime.diff(timePlayWasClicked) < (60000*(index+1)/beatsPerMinute) ? \"title\": \"\" }>{ note }</h1>\n              </div>\n            </div>\n          )\n        })}\n      </div>\n\n      <div className=\"container\">\n        <div className=\"field is-horizontal\">\n          <div className=\"field-label is-normal\">\n            <label className=\"label\">BPM</label>\n          </div>\n          <div className=\"field-body\">\n            <div className=\"field\">\n              <p className=\"control\">\n              <input \n                type=\"text\" \n                className=\"input\" \n                value={ beatsPerMinute }\n                onChange={e=>{ setBeatsPerMinute(e.target.value)}}>\n\n              </input>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container\" style={{paddingTop: '1rem'}}>\n        <div classNamme=\"columns\">\n          <div className=\"column \">\n            <button \n              className=\"button is-primary\"\n              onClick={() => handleClickPlay()}>\n              {playing ? (\n                <span>PAUSE</span>\n              ) : (\n                <span>PLAY</span>\n              )}\n            </button>\n          </div>\n          <div className=\"column \">\n            <button \n              className=\"button is-info\"\n              onClick={() => handleClickReset()}>\n                <span> RESET </span>\n            </button>\n          </div>\n        </div>\n       \n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}