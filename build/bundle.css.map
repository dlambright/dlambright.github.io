{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../RouterLink.svelte",
    "../../landingPage.svelte",
    "../../Navbar.svelte",
    "../../ToolRequest.svelte",
    "../../navbar.svelte",
    "../../toolDisplay.svelte",
    "../../LoginComponent.svelte",
    "../../sidebar.svelte",
    "../../logInComponent.svelte",
    "../../orderComponent.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport { curRoute } from './router.js';\nexport let page = {\n  path: '/',\n  name: 'landingPage'\n}\n\nfunction redirectTo(event){\n  curRoute.set(event.target.pathname);\n  window.history.pushState({path: page.path}, '', window.location.origin + page.path);\n}\n\n</script>\n\n<style>\n  a {\n    text-transform: uppercase;\n    text-decoration: underline;\n    padding: 1rem;\n  }\n</style>\n\n<a href={page.path} on:click|preventDefault={redirectTo}>{page.name}</a>\n",
    "<script>\n\timport './main.scss';\n\timport { onMount } from 'svelte';\n\n\timport { db, auth, googleProvider } from './firebase.js';\n\timport { authState } from \"rxfire/auth\";\n\timport { collectionData } from 'rxfire/firestore';\n\timport { startWith } from 'rxjs/operators';\n  import ToolRequest from './ToolRequest.svelte';\n\timport Navbar from './navbar.svelte';\n\timport ToolDisplay from './toolDisplay.svelte';\n\timport CartComponent from './CartComponent.svelte';\n\timport LogInComponent from './LoginComponent.svelte';\n\timport OrderBrowserComponent from './orderBrowserComponent.svelte';\n\timport { cart, user } from './stores.js';\n  import router, { curRoute } from './router.js';\n\n\tconst inventoryQuery = db.collection('inventory'); //.orderBy('displayName');\n\tconst toolDataQuery = db.collection('tool_data');\n\t$: inventory = collectionData(inventoryQuery).pipe(startWith([]));\n\tvar toolDataDictionary = collectionData(toolDataQuery);\n\t$: toolData = toolDataDictionary.pipe(startWith([]));\n\n  function moveToCartView(){\n    curRoute.set('/cart');\n    window.history.pushState({path: '/cart'}, '', window.location.origin + '/cart');\n  }\n\n\t/*\n\tonMount(async () =>{\n\t\tdebugger;\n\t});\n\t*/\n\n</script>\n\n\n\n<main>\n\t<Navbar/>\n\t<section class=\"section is-halfheight has-background-light\">\n\t\t<OrderBrowserComponent isEmployeeOrderView={$user.isEmployee} inventoryData={inventory} toolData={toolData}/> <!--{$user.userId !== \"\"}/>-->\n\t</section>\n\n\t<section class=\"hero is-medium is-halfheight is-primary is-bold\">\n\t\t<div class=\"hero-body\">\n\t     <div class=\"container\">\n\t       <h1 class=\"title\">\n\t         Primary bold title\n\t       </h1>\n\t       <h2 class=\"subtitle\">\n\t         Primary bold subtitle\n\t       </h2>\n\t     </div>\n\t   </div>\n\t</section>\n\n\t<section class=\"section is-medium\">\n\t\t<div class=\"columns\">\n\t\t\t<div class=\"column is-one-quarter\">\n\t\t\t\t<h2 class=\"title is-2\">\n\t\t\t\t\tFind what you need\n\t\t\t\t</h2>\n\t\t\t\t<p> TEXT HERE </p>\n\t\t\t</div>\n\t\t\t<div class=\"column is-one-quarter\">\n\t\t\t\t<h2 class=\"title is-2\">\n\t\t\t\t\tWe deliver it to you\n\t\t\t\t</h2>\n\t\t\t\t<p> TEXT HERE </p>\n\t\t\t</div>\n\t\t\t<div class=\"column is-one-quarter\">\n\t\t\t\t<h2 class=\"title is-2\">\n\t\t\t\t\tYou get the job done\n\t\t\t\t</h2>\n\t\t\t\t<p> TEXT HERE </p>\n\t\t\t</div>\n\t\t\t<div class=\"column is-one-quarter\">\n\t\t\t\t<h2 class=\"title is-2\">\n\t\t\t\t\tWe pick it up\n\t\t\t\t</h2>\n\t\t\t\t<p> TEXT HERE </p>\n\t\t\t</div>\n\n\t\t</div>\n\t</section>\n\n\t<section class=\"section has-background-light\">\n\t\t<h1 class='title'>PRODUCTS</h1>\n\t\t<div class=\"columns is-multiline is-centered\">\n\t\t\t{#each $toolData as product}\n\t\t\t\t<div class=\"column is-one-quarter\">\n\t\t\t\t\t<!-- {product.displayName} -->\n\t\t\t\t\t<ToolDisplay tool={product}/>\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t\t<div class=\"column is-half\">\n\t\t\t\t<ToolRequest/>\n\t\t\t</div>\n\t\t</div>\n    { #if $cart.length > 0 }\n      <button class=\"button is-primary\" on:click={moveToCartView}>\n        <strong> MAKE PURCHASE </strong>\n      </button>\n    {/if}\n\t</section>\n\n\n\n\n</main>\n\n\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 0px;\n\t\tmargin: 0px;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t#addressBox {\n\t\tpadding: 6px;\n\t\tborder-color: #ececec;\n\t\tborder-width:1px;\n\t\tborder-style: solid;\n\t\tborder-radius: 5px;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>\n",
    "<script>\n\timport './main.scss';\n\n\timport router, { curRoute } from './router.js';\n\timport RouterLink from './RouterLink.svelte';\n\timport { cart, user } from './stores.js';\n\timport Sidebar from './sidebar.svelte';\n\timport LogInComponent from './logInComponent.svelte';\n\n\tlet sidebar_show = false;\n\n  //const unsibscribe = authState(auth).subscribe( u => user => u );\n\n\tfunction moveToCartView(){\n\t\tcurRoute.set('/cart');\n\t\twindow.history.pushState({path: '/cart'}, '', window.location.origin + '/cart');\n\t}\n\n\tfunction moveToEmployeeView(){\n\t\tcurRoute.set('/employee');\n\t\twindow.history.pushState({path: '/employee'}, '', window.location.origin + '/employee');\n\t}\n\n\tfunction moveToLandingView(){\n\t\tcurRoute.set('/');\n\t\twindow.history.pushState({path: '/'}, '', window.location.origin + '/');\n\t}\n\n\tfunction togNav(){\n\t\tdocument.getElementById(\"navbarDustin\").classList.contains(\"is-active\") ?\n\t\tdocument.getElementById(\"navbarDustin\").classList.remove(\"is-active\") :\n\t\tdocument.getElementById(\"navbarDustin\").classList.add(\"is-active\")\n\t}\n\n\tfunction toggleDropDown(){\n\t\tdocument.getElementById(\"dropDown\").classList.contains(\"is-active\") ?\n\t\tdocument.getElementById(\"dropDown\").classList.remove(\"is-active\") :\n\t\tdocument.getElementById(\"dropDown\").classList.add(\"is-active\")\n\t}\n\n\tfunction resetInventory(){\n\t\tvar orderRef = db.collection(\"inventory\")\n\t\t.get()\n\t\t.then(function(querySnapshot) {\n\t\t\tquerySnapshot.forEach(function(doc) {\n\t\t\t\tdb.collection(\"inventory\").doc(doc.id).update({\n\t\t\t\t\tstatus: \"available\"\n\t\t\t\t})\n\t\t\t\t.then(function() {\n\t\t\t\t\t\tconsole.log(\"Document successfully updated!\");\n\t\t\t\t})\n\t\t\t\t.catch(function(error) {\n\t\t\t\t\t\tconsole.error(\"Error updating document: \", error);\n\t\t\t\t});\n\t\t\t});\n\t\t})\n\t}\n\n\n</script>\n\n<main>\n\n  <nav class=\"navbar is-dark \" role=\"navigation\" aria-label=\"main navigation\">\n    <div class=\"navbar-brand\">\n\t\t\t<div class=\"navbar-item\">\n\t\t\t\t<button class=\"button is-info\" on:click={moveToLandingView}> <strong> HOME </strong> </button>\n\t\t\t</div>\n\t\t\t<a role=\"button\" class=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarDustin\"on:click={togNav}>\n\t\t\t  <span aria-hidden=\"true\"></span>\n\t\t\t  <span aria-hidden=\"true\"></span>\n\t\t\t  <span aria-hidden=\"true\"></span>\n\t\t\t</a>\n    </div>\n\t\t<div id=\"navbarDustin\" class=\"navbar-menu\">\n\t\t \t<div class=\"navbar-end\">\n\t\t\t\t{ #if $cart.length > 0 }\n\t\t\t\t\t<a class=\"navbar-item\" on:click={moveToCartView} style=\"text-decoration: none;\">\n\t\t\t\t\t\t<i class=\"fas fa-2x fa-shopping-cart\"></i>\n\t\t\t\t\t\t<strong style=\"color:inherit;\"> { $cart.length } </strong>\n\t\t\t\t\t</a>\n\t\t\t\t{/if}\n\t\t\t\t<a class=\"navbar-item\" on:click={moveToEmployeeView} style=\"text-decoration: none;\">\n\t\t\t\t\t<i class=\"fas fa-2x fa-eye\"></i>\n\t\t\t\t</a>\n\t\t\t\t<div id=\"dropDown\" class=\"navbar-item has-dropdown\" >\n\t\t\t\t\t<div class=\"navbar-link is-arrowless\" on:click={toggleDropDown}>\n\t\t\t\t\t\t<i class=\"is-right fas fa-2x fa-user-circle\" ></i>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"navbar-dropdown is-right\" style=\"min-width: 24rem; padding: 1rem;\">\n\t          <div class=\"\" style=\"width:100% \">\n\t            <LogInComponent/>\n\t          </div>\n\t\t\t\t\t</div>\n\n\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n  </nav>\n\n\t<!-- <Sidebar bind:show={sidebar_show} /> -->\n\n</main>\n\n<style>\n\t.is-right{\n\t\tleft: 50;\n\t}\n\t/* .navbar-item:hover{\n\t\tbackground-color: #ff0000;\n\t} */\n\t.navbar-end .a{\n\t\ttext-decoration: none;\n\t}\n</style>\n",
    "<script>\nimport { db } from './firebase.js';\nimport firebase from 'firebase/app';\nlet badEmailFormat = false;\n\nlet emailAddress = \"\";\nlet message = \"\"\n\n\nfunction validateEmail(){\n    const expression = /(?!.*\\.{2})^([a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.[a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)*|\"((([ \\t]*\\r\\n)?[ \\t]+)?([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*(([ \\t]*\\r\\n)?[ \\t]+)?\")@(([a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.)+([a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.?$/i;\n\n    return expression.test(String(emailAddress).toLowerCase())\n  }\n\nfunction checkEmail(){\n  let isNotValid = validateEmail();\n  if (isNotValid){\n    badEmailFormat = false;\n  }\n  else{\n    badEmailFormat = true;\n  }\n}\n\nfunction sendMessage(){\n  let datey = new Date(Date.now()).toISOString();\n  var docData = {\n    date: datey,\n    email_address: emailAddress,\n    message: message\n  };\n\n  var newDoc = db.collection(\"requests\").doc();\n\n  // later...\n  newDoc.set(docData).then(function() {\n    console.log(\"Document successfully written!\");\n  });\n\n\n}\n\n</script>\n\n<div class=\"box\">\n\n  <h3 class=\"title is-3\"> Can't find it? </h3>\n  <h3 class=\"subtitle \"> Send us a message and we'll get it.<br/> You can be the first to use it!</h3>\n\n\n  <label class=\"label is-pulled-left\">Email</label>\n  <div class=\"control has-icons-left has-icons-right\">\n    <input class=\"input\" type=\"email\" placeholder=\"Email\" bind:value={emailAddress} class:is-danger=\"{badEmailFormat==true}\" on:keyup={checkEmail}>\n    <span class=\"icon is-small is-left\">\n      <i class=\"fas fa-envelope\"></i>\n    </span>\n    <span class=\"icon is-small is-right\" class:is-hidden=\"{badEmailFormat==false}\">\n      <i class=\"fas fa-exclamation-triangle\"></i>\n    </span>\n  </div>\n  <p class=\"help is-danger\" class:is-hidden=\"{badEmailFormat==false}\">This email is invalid</p>\n\n\n  <label class=\"label is-pulled-left\" style=\"margin-top: 10px;\">Message</label>\n  <div class=\"control\">\n    <textarea bind:value={message} class=\"textarea\" placeholder=\"Tell us which tool you're looking for\"></textarea>\n  </div>\n\n  <div class=\"columns\">\n    <div class=\"column is-three-quarter\"/>\n    <div class=\"column is-one-quarter\">\n      <button class=\"button is-primary is-fullwidth\" on:click={sendMessage}><strong>SUBMIT</strong></button>\n    </div>\n  </div>\n\n</div>\n\n\n\n\n\n<style>\ntextarea{\n  margin-bottom: 100px;\n  height:10px;\n}\n\n.box{\n}\n</style>\n",
    "<script>\n\timport './main.scss';\n\n\timport router, { curRoute } from './router.js';\n\timport RouterLink from './RouterLink.svelte';\n\timport { cart, user } from './stores.js';\n\timport Sidebar from './sidebar.svelte';\n\timport LogInComponent from './logInComponent.svelte';\n\n\tlet sidebar_show = false;\n\n  //const unsibscribe = authState(auth).subscribe( u => user => u );\n\n\tfunction moveToCartView(){\n\t\tcurRoute.set('/cart');\n\t\twindow.history.pushState({path: '/cart'}, '', window.location.origin + '/cart');\n\t}\n\n\tfunction moveToEmployeeView(){\n\t\tcurRoute.set('/employee');\n\t\twindow.history.pushState({path: '/employee'}, '', window.location.origin + '/employee');\n\t}\n\n\tfunction moveToLandingView(){\n\t\tcurRoute.set('/');\n\t\twindow.history.pushState({path: '/'}, '', window.location.origin + '/');\n\t}\n\n\tfunction togNav(){\n\t\tdocument.getElementById(\"navbarDustin\").classList.contains(\"is-active\") ?\n\t\tdocument.getElementById(\"navbarDustin\").classList.remove(\"is-active\") :\n\t\tdocument.getElementById(\"navbarDustin\").classList.add(\"is-active\")\n\t}\n\n\tfunction toggleDropDown(){\n\t\tdocument.getElementById(\"dropDown\").classList.contains(\"is-active\") ?\n\t\tdocument.getElementById(\"dropDown\").classList.remove(\"is-active\") :\n\t\tdocument.getElementById(\"dropDown\").classList.add(\"is-active\")\n\t}\n\n\tfunction resetInventory(){\n\t\tvar orderRef = db.collection(\"inventory\")\n\t\t.get()\n\t\t.then(function(querySnapshot) {\n\t\t\tquerySnapshot.forEach(function(doc) {\n\t\t\t\tdb.collection(\"inventory\").doc(doc.id).update({\n\t\t\t\t\tstatus: \"available\"\n\t\t\t\t})\n\t\t\t\t.then(function() {\n\t\t\t\t\t\tconsole.log(\"Document successfully updated!\");\n\t\t\t\t})\n\t\t\t\t.catch(function(error) {\n\t\t\t\t\t\tconsole.error(\"Error updating document: \", error);\n\t\t\t\t});\n\t\t\t});\n\t\t})\n\t}\n\n\n</script>\n\n<main>\n\n  <nav class=\"navbar is-dark \" role=\"navigation\" aria-label=\"main navigation\">\n    <div class=\"navbar-brand\">\n\t\t\t<div class=\"navbar-item\">\n\t\t\t\t<button class=\"button is-info\" on:click={moveToLandingView}> <strong> HOME </strong> </button>\n\t\t\t</div>\n\t\t\t<a role=\"button\" class=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarDustin\"on:click={togNav}>\n\t\t\t  <span aria-hidden=\"true\"></span>\n\t\t\t  <span aria-hidden=\"true\"></span>\n\t\t\t  <span aria-hidden=\"true\"></span>\n\t\t\t</a>\n    </div>\n\t\t<div id=\"navbarDustin\" class=\"navbar-menu\">\n\t\t \t<div class=\"navbar-end\">\n\t\t\t\t{ #if $cart.length > 0 }\n\t\t\t\t\t<a class=\"navbar-item\" on:click={moveToCartView} style=\"text-decoration: none;\">\n\t\t\t\t\t\t<i class=\"fas fa-2x fa-shopping-cart\"></i>\n\t\t\t\t\t\t<strong style=\"color:inherit;\"> { $cart.length } </strong>\n\t\t\t\t\t</a>\n\t\t\t\t{/if}\n\t\t\t\t<a class=\"navbar-item\" on:click={moveToEmployeeView} style=\"text-decoration: none;\">\n\t\t\t\t\t<i class=\"fas fa-2x fa-eye\"></i>\n\t\t\t\t</a>\n\t\t\t\t<div id=\"dropDown\" class=\"navbar-item has-dropdown\" >\n\t\t\t\t\t<div class=\"navbar-link is-arrowless\" on:click={toggleDropDown}>\n\t\t\t\t\t\t<i class=\"is-right fas fa-2x fa-user-circle\" ></i>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"navbar-dropdown is-right\" style=\"min-width: 24rem; padding: 1rem;\">\n\t          <div class=\"\" style=\"width:100% \">\n\t            <LogInComponent/>\n\t          </div>\n\t\t\t\t\t</div>\n\n\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n  </nav>\n\n\t<!-- <Sidebar bind:show={sidebar_show} /> -->\n\n</main>\n\n<style>\n\t.is-right{\n\t\tleft: 50;\n\t}\n\t/* .navbar-item:hover{\n\t\tbackground-color: #ff0000;\n\t} */\n\t.navbar-end .a{\n\t\ttext-decoration: none;\n\t}\n</style>\n",
    "<script>\nimport './main.scss';\nimport { cart } from './stores.js';\nimport { onMount } from 'svelte';\n\nexport let tool = {\n  displayName: \"TOOL NAME\",\n  pricePerHour: 5,\n  imageName: \"powerWasher.jpg\"\n}\n\n$: selected = $cart.filter(e => e.displayName === tool.displayName).length > 0;\n\n\nfunction handleAdd(){\n  cart.addItem(tool);\n}\n\nfunction handleRemove(){\n  cart.removeItem(tool);\n}\n\nonMount(async () => {\n\n});\n\n\n</script>\n\n<style>\n  .priceTitle {\n    padding-top: 5px;\n  }\n</style>\n\n<div class=\"box\">\n  <h3 class=\"title is-3\"> {tool.displayName} </h3>\n  <figure class=\"image is-square is-100x100\">\n    <img src={tool.imageName} alt=\"\">\n  </figure>\n\n  <h4 class=\"title is-4 priceTitle\"> ${tool.costPerHour}/hour </h4>\n\n  <div>\n    { #if selected }\n      <button class=\"button is-info is-fullwidth\" on:click={handleRemove}><strong>REMOVE FROM CART</strong></button>\n    { :else }\n      <button class=\"button is-primary is-fullwidth\" on:click={handleAdd}><strong>ADD TO CART</strong></button>\n    { /if }\n\n  </div>\n\n\n</div>\n",
    "<script>\n  import { user } from './stores.js'\n  import { db, auth, googleProvider } from './firebase.js';\n  import { authState } from \"rxfire/auth\";\n  const unsibscribe = authState(auth).subscribe( u => user => u );\n\n  let userVal = \"\";\n  let userPasswordVal = \"\";\n\n\n\n\n\tfunction signUp(){\n\t\t\tauth.createUserWithEmailAndPassword(userVal, userPasswordVal)\n\t\t\t.then(function(e){\n        var newUser = {userName: userVal, userId: e.user.uid};\n\t\t\t\tuser.update(u => newUser);\n\t\t\t})\n\t\t\t.catch(function(error) {\n\t\t\t  // Handle Errors here.\n\t\t\t  var errorCode = error.code;\n\t\t\t  var errorMessage = error.message;\n\n\t\t\t\tif (errorCode == \"auth/email-already-in-use\"){\n\t\t\t\t\t\talert(\"This email already exists in the system\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\talert(errorMessage);\n\t\t\t\t}\n\n\t\t\t  // ...\n\t\t\t});\n\t\t\t// user.loggedIn = true;\n\t\t}\n\n\n\t\tfunction logIn() {\n\t\t\tauth.signInWithEmailAndPassword(userVal, userPasswordVal)\n\t\t\t.then(function(e){\n        var orderRef = db.collection(\"employees\").where(\"user_id\", \"==\", e.user.uid)\n        .get()\n\n        .then(function(querySnapshot) {\n          // if (querySnapshot.docs.length == 1){\n          //   debugger;\n          // }\n          // if (querySnapshot.docs.length == 0){\n          //   debugger;\n          // }\n          // if (querySnapshot.docs.length > 1){\n          //   debugger;\n          // }\n\n          if (querySnapshot.docs.length == 1){\n            querySnapshot.forEach(function(doc) {\n              var newUser = {userName: userVal, userId: e.user.uid, isEmployee:true};\n              user.update(u => newUser);\n            })\n          }\n          else{\n            var newUser = {userName: userVal, userId: e.user.uid, isEmployee:false};\n            user.update(u => newUser);\n          }\n\n\n        })\n\t\t\t})\n\t\t\t.catch(function(error) {\n\t\t\t\t// Handle Errors here.\n\t\t\t\tvar errorCode = error.code;\n\t\t\t\tvar errorMessage = error.message;\n\t\t\t\tconsole.log(errorMessage);\n\n\t\t\t\t// ...\n\t\t\t});\n\t\t\t// user.loggedIn = true;\n\t\t}\n\n    function logOut(){\n      let newUser = {userName:\"\", userId:\"\"}\n      user.update(u => newUser);\n    }\n\n</script>\n\n\n<main>\n  { #if $user.userId === \"\" }\n    <h2 class=\"title is-4\">\n      LOG IN\n    </h2>\n    <div class=\"field\">\n      <p class=\"control has-icons-left has-icons-right\">\n        <input class=\"input\" type=\"email\" placeholder=\"Email\" bind:value={userVal}>\n        <span class=\"icon is-small is-left\">\n          <i class=\"fas fa-envelope\"></i>\n        </span>\n        <span class=\"icon is-small is-right\">\n          <i class=\"fas fa-check\"></i>\n        </span>\n      </p>\n    </div>\n    <div class=\"field\">\n      <p class=\"control has-icons-left\">\n        <input class=\"input\" type=\"password\" placeholder=\"Password\" bind:value={userPasswordVal}>\n        <span class=\"icon is-small is-left\">\n          <i class=\"fas fa-lock\"></i>\n        </span>\n      </p>\n    </div>\n    <div class=\"field\">\n      <p class=\"control\">\n        <button class=\"button is-success is-outlined\" on:click={signUp}>\n          Sign Up\n        </button>\n        <button class=\"button is-success is-right\" on:click={logIn}>\n          Log In\n        </button>\n      </p>\n    </div>\n  { :else }\n    <h1 class=\"title is-4 is-dark\">LOGGED IN AS {$user.userName}</h1>\n    <div class=\"field\">\n      <p class=\"control\">\n        <button class=\"button is-success\" on:click={logOut}>\n          Log Out\n        </button>\n      </p>\n    </div>\n  { /if }\n\n</main>\n\n\n<style>\nmain {\n  width: 100%;\n}\n\n</style>\n",
    "<script>\nimport { fly } from 'svelte/transition';\nimport { cart } from './stores.js';\nimport ToolDisplay from './toolDisplay.svelte';\nexport let show = false;\n\n\n</script>\n\n{#if show}\n\n  <!-- <aside class=\"menu\">\n    <h1 class=\"is-1\"> MY CART </h1>\n    <div class=\"columns\">\n      { #if $cart.length > 0 }\n        {#each $cart as product}\n          <div class=\"column is-one-quarter\">\n            <ToolDisplay tool={product}/>\n          </div>\n        {/each}\n      { /if }\n    </div>\n  </aside> -->\n\n\n  <nav transition:fly={{x: 1000, opacity: 1}} class=\"has-background-dark\">\n  <h1 class=\"title is-white\"> MY CART </h1>\n\n    { #if $cart.length > 0 }\n      <div class=\"columns is-multiline\">\n        {#each $cart as product}\n          <div class=\"column is-one-quarter\">\n            <ToolDisplay tool={product} selected=true/>\n          </div>\n        {/each}\n      </div>\n\n      <button class=\"is-primary\"> <strong> PURCHASE </strong> </button>\n    {:else}\n      <strong style=\"color:#fff;\"> CART IS EMPTY </strong>\n    { /if }\n\n\n\n  </nav>\n\n\n{/if}\n\n\n\n<style>\n\nnav {\n  position: fixed;\n  top: 200;\n  right: 0;\n  min-height: 100%;\n  padding: 1rem;\n  border-left: 1px solid #aaa;\n  overflow-y: auto;\n\twidth: 75%;\n  z-index: 999;\n}\n\n</style>\n",
    "<script>\n  import { user } from './stores.js'\n  import { db, auth, googleProvider } from './firebase.js';\n  import { authState } from \"rxfire/auth\";\n  const unsibscribe = authState(auth).subscribe( u => user => u );\n\n  let userVal = \"\";\n  let userPasswordVal = \"\";\n\n\n\n\n\tfunction signUp(){\n\t\t\tauth.createUserWithEmailAndPassword(userVal, userPasswordVal)\n\t\t\t.then(function(e){\n        var newUser = {userName: userVal, userId: e.user.uid};\n\t\t\t\tuser.update(u => newUser);\n\t\t\t})\n\t\t\t.catch(function(error) {\n\t\t\t  // Handle Errors here.\n\t\t\t  var errorCode = error.code;\n\t\t\t  var errorMessage = error.message;\n\n\t\t\t\tif (errorCode == \"auth/email-already-in-use\"){\n\t\t\t\t\t\talert(\"This email already exists in the system\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\talert(errorMessage);\n\t\t\t\t}\n\n\t\t\t  // ...\n\t\t\t});\n\t\t\t// user.loggedIn = true;\n\t\t}\n\n\n\t\tfunction logIn() {\n\t\t\tauth.signInWithEmailAndPassword(userVal, userPasswordVal)\n\t\t\t.then(function(e){\n        var orderRef = db.collection(\"employees\").where(\"user_id\", \"==\", e.user.uid)\n        .get()\n\n        .then(function(querySnapshot) {\n          // if (querySnapshot.docs.length == 1){\n          //   debugger;\n          // }\n          // if (querySnapshot.docs.length == 0){\n          //   debugger;\n          // }\n          // if (querySnapshot.docs.length > 1){\n          //   debugger;\n          // }\n\n          if (querySnapshot.docs.length == 1){\n            querySnapshot.forEach(function(doc) {\n              var newUser = {userName: userVal, userId: e.user.uid, isEmployee:true};\n              user.update(u => newUser);\n            })\n          }\n          else{\n            var newUser = {userName: userVal, userId: e.user.uid, isEmployee:false};\n            user.update(u => newUser);\n          }\n\n\n        })\n\t\t\t})\n\t\t\t.catch(function(error) {\n\t\t\t\t// Handle Errors here.\n\t\t\t\tvar errorCode = error.code;\n\t\t\t\tvar errorMessage = error.message;\n\t\t\t\tconsole.log(errorMessage);\n\n\t\t\t\t// ...\n\t\t\t});\n\t\t\t// user.loggedIn = true;\n\t\t}\n\n    function logOut(){\n      let newUser = {userName:\"\", userId:\"\"}\n      user.update(u => newUser);\n    }\n\n</script>\n\n\n<main>\n  { #if $user.userId === \"\" }\n    <h2 class=\"title is-4\">\n      LOG IN\n    </h2>\n    <div class=\"field\">\n      <p class=\"control has-icons-left has-icons-right\">\n        <input class=\"input\" type=\"email\" placeholder=\"Email\" bind:value={userVal}>\n        <span class=\"icon is-small is-left\">\n          <i class=\"fas fa-envelope\"></i>\n        </span>\n        <span class=\"icon is-small is-right\">\n          <i class=\"fas fa-check\"></i>\n        </span>\n      </p>\n    </div>\n    <div class=\"field\">\n      <p class=\"control has-icons-left\">\n        <input class=\"input\" type=\"password\" placeholder=\"Password\" bind:value={userPasswordVal}>\n        <span class=\"icon is-small is-left\">\n          <i class=\"fas fa-lock\"></i>\n        </span>\n      </p>\n    </div>\n    <div class=\"field\">\n      <p class=\"control\">\n        <button class=\"button is-success is-outlined\" on:click={signUp}>\n          Sign Up\n        </button>\n        <button class=\"button is-success is-right\" on:click={logIn}>\n          Log In\n        </button>\n      </p>\n    </div>\n  { :else }\n    <h1 class=\"title is-4 is-dark\">LOGGED IN AS {$user.userName}</h1>\n    <div class=\"field\">\n      <p class=\"control\">\n        <button class=\"button is-success\" on:click={logOut}>\n          Log Out\n        </button>\n      </p>\n    </div>\n  { /if }\n\n</main>\n\n\n<style>\nmain {\n  width: 100%;\n}\n\n</style>\n",
    "<script>\n\nimport './main.scss';\nimport { user } from './stores.js';\nimport { db, auth, googleProvider } from './firebase.js';\nimport { mapsApiKey } from './api.js';\nimport Map from './Map.svelte'\nimport { collectionData } from 'rxfire/firestore';\nimport { startWith } from 'rxjs/operators';\n\n\nlet expanded = false;\n$: userLatitude = 0;\n$: userLongitude = 0;\n\nexport let order = {name: 'TEZT'};\nexport let isEmployeeView = false;\nexport let inventoryData = [];\nexport let toolData = [];\n\nlet date = order.time_stamp.split(\"T\")[0];\nlet time = order.time_stamp.split(\"T\")[1].split(\".\")[0].replace(\"Z\", \"\");\n\n$: statusColor = () => {\n  switch (order.status){\n    case \"createdz\":\n      return \"#0000AA\";\n\n    default:\n      return \"#222222\";\n  }\n}\n\nfunction getToolDataForTbId(id){\n  const tool = $inventoryData.find((el) => { return el.tb_id === id });\n  const toolData = $toolData.find( (element) => { return element.name === tool.data });\n  return toolData;\n}\n\nfunction toggleExpanded(){\n  expanded = !expanded;\n}\nfunction latLonCheck(){\n  if (order.status!=='delivering'){\n    return false\n  }\n  let storageLatitude=41.511171;\n  let storageLongitude=-112.031399;\n  let distance=Math.pow(Math.pow(userLatitude-storageLatitude, 2)+Math.pow(userLongitude-storageLongitude, 2), 1/2);\n  if (distance > .0097) {\n    return true\n  }\n  return false\n}\nfunction processOrderAcceptance(){\n  var orderRef = db.collection(\"orders\").where(\"order_id\", \"==\", order.order_id)\n  .get()\n  .then(function(querySnapshot) {\n    querySnapshot.forEach(function(doc) {\n      db.collection(\"orders\").doc(doc.id).update({\n        employee: $user.userId,\n        status: \"processing\"\n      })\n      .then(function() {\n          console.log(\"Document successfully updated!\");\n          order.employee=$user.userId,\n          order.status = \"processing\"\n      })\n      .catch(function(error) {\n          // The document probably doesn't exist.\n          console.error(\"Error updating document: \", error);\n      });\n    });\n  })\n}\n\nfunction processOrderCheckout(){\n  var orderRef = db.collection(\"orders\").where(\"order_id\", \"==\", order.order_id)\n  .get()\n  .then(function(querySnapshot) {\n    querySnapshot.forEach(function(doc) {\n      db.collection(\"orders\").doc(doc.id).update({\n        status: \"delivering\"\n      })\n      .then(function() {\n          console.log(\"Document successfully updated!\");\n          order.status = \"delivering\"\n      })\n      .catch(function(error) {\n          // The document probably doesn't exist.\n          console.error(\"Error updating document: \", error);\n      });\n    });\n  })\n}\n\nfunction getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.watchPosition(showPosition);\n  } else {\n    alert(\"GEOLOCATION ERROR\");\n  }\n}\n\nfunction showPosition(position) {\n  const latLonCheckVal = latLonCheck();\n  if(latLonCheckVal && isEmployeeView){\n    userLatitude = position.coords.latitude;\n    userLongitude = position.coords.longitude;\n\n    var orderRef = db.collection(\"orders\").where(\"order_id\", \"==\", order.order_id)\n    .get()\n    .then(function(querySnapshot) {\n      querySnapshot.forEach(function(doc) {\n        db.collection(\"orders\").doc(doc.id).update({\n          delivery_latitude: userLatitude,\n          delivery_longitude: userLongitude\n        })\n        // .then(function() {\n        //     console.log(\"Document successfully updated!\");\n        // })\n        // .catch(function(error) {\n        //     console.error(\"Error updating document: \", error);\n        // });\n      });\n    })\n  }\n  else{\n    userLatitude = order.delivery_latitude;\n    userLongitude = order.delivery_longitude;\n  }\n}\n\nfunction processOrderDelivery(){\n  var orderRef = db.collection(\"orders\").where(\"order_id\", \"==\", order.order_id)\n  .get()\n  .then(function(querySnapshot) {\n    querySnapshot.forEach(function(doc) {\n      db.collection(\"orders\").doc(doc.id).update({\n        status: \"at customer\",\n        start_time: Date.now()\n      })\n      .then(() => {\n        order.status = \"at customer\";\n        console.log(\"updated\");\n      })\n    });\n  })\n}\n\nfunction processPickupRequest(){\n  var orderRef = db.collection(\"orders\").where(\"order_id\", \"==\", order.order_id)\n  .get()\n  .then(function(querySnapshot) {\n    querySnapshot.forEach(function(doc) {\n      db.collection(\"orders\").doc(doc.id).update({\n        status: \"pickup requested\",\n        finish_time: Date.now()\n      })\n      .then(() => {\n        order.status = \"pickup requested\"\n        console.log(\"updated\");\n      })\n    });\n  })\n}\n\nfunction processOrderCompletion(){\n  var orderRef = db.collection(\"orders\").where(\"order_id\", \"==\", order.order_id)\n  .get()\n  .then(function(querySnapshot) {\n    querySnapshot.forEach(function(doc) {\n      db.collection(\"orders\").doc(doc.id).update({\n        status: \"completed\",\n      })\n      .then(() => {\n        order.status = \"completed\"\n        console.log(\"updated\");\n      })\n    });\n  })\n}\n\nlet statusColors = {\n  \"created\": \"#fffa65\",\n  \"processing\": \"#3ae374\",\n  \"delivering\": \"#3ae374\",\n  \"at customer\": \"#3ae374\",\n  \"pick-up requested\": \"#fffa65\",\n  \"pick-up en route\": \"#3ae374\",\n  \"completed\": \"#0c2461\"\n}\n\nif(order.status === \"delivering\" || order.status ===\"pickup requested\"){\n  setInterval(getLocation, 1000);\n}\n\nlet possibleStatuses = [\"created\", \"processing\", \"delivering\", \"pick-up requested\", \"pick-up en route\", \"completed\"];\n$: statusPercent = ((possibleStatuses.indexOf(order.status) % 3 + 1) * 33 + 1);\n\n</script>\n\n\n<div class={!expanded ? \"is-4 column has-background-light\" : \"is-6 column has-background-light\"} >\n  <div class=\"card\">\n    <div class=\"card-image\" style={expanded ? \"border-bottom-left-radius: 0px; border-bottom-right-radius: 0px;\" : \"border-bottom-left-radius: 5px; border-bottom-right-radius: 5px;\"} on:click={toggleExpanded}>\n      <h3 class=\"title is-3\" style=\"margin-top:5px;\">\n        {order.name}\n      </h3>\n      <h3 class=\"subtitle\">\n        {date} <br/>\n        {time}\n      </h3>\n      <h3 class=\"subtitle\">\n        Status: { order.status }\n      </h3>\n      <div class=\"section\">\n        <progress class=\"progress is-primary\" value={statusPercent} max=\"100\"> </progress>\n      </div>\n    </div>\n\n    {#if expanded === true}\n      <div class=\"content\">\n        <div class=\"card-content\">\n          <div class=\"columns is-centered is-vcentered\">\n            <div class=\"colmun is-8\">\n              <div>\n                {order.address}<br/>{order.city},{order.state},{order.zip_code}\n              </div>\n            </div>\n            <div class=\"column is-2\">\n              <a class=\"button is-success is-medium\" href=\"https://maps.google.com/?q={order.address} {order.city},{order.state},{order.zip_code}\">\n                <span class=\"icon is-medium\">\n                  <i class=\"fas fa-map-marker-alt\"></i>\n                </span>\n              </a>\n            </div>\n          </div>\n\n          {#if isEmployeeView === true}\n\n            <div class=\"box\">\n              <h3 class=\"subtitle\"> Tools </h3>\n              <div class=\"columns is-multiline is-centered\">\n                {#each order.tools as tool}\n                  <div class=\"column is-7\">\n                    <label class=\"checkbox is-pulled-left\">\n                      <input type=\"checkbox\">\n                      {tool}\n                    </label>\n                  </div>\n                {/each}\n              </div>\n              {#if order.status === \"processing\"}\n                <button class=\"button is-primary is-fullwidth is-large\" on:click={processOrderCheckout}>\n                  <strong>CHECK OUT</strong>\n                </button>\n              {/if}\n            </div>\n            {#if order.status === \"created\"}\n              <button class=\"button is-primary is-fullwidth is-large\" on:click={processOrderAcceptance}>\n                <strong>ACCEPT</strong>\n              </button>\n            {/if}\n            {#if order.status === \"delivering\"}\n              <button class=\"button is-primary is-fullwidth is-large\" on:click={processOrderDelivery}>\n                <strong>DELIVERED</strong>\n              </button>\n            {/if}\n            {#if order.status === \"pickup requested\"}\n              <button class=\"button is-primary is-fullwidth is-large\" on:click={processOrderCompletion}>\n                <strong>FINSH ORDER</strong>\n              </button>\n            {/if}\n\n          {:else}\n            <div class=\"box\">\n              <h3 class=\"subtitle\"> Tools </h3>\n              <div class=\"columns is-multiline is-centered\">\n                {#each order.tools as tool}\n                  <div class=\"column is-7\">\n                    <strong class=\"is-pulled-left\">\n                      {getToolDataForTbId(tool).displayName}\n                      <!-- {toolData[tool.data].displayName} -->\n                    </strong>\n                  </div>\n                {/each}\n              </div>\n            </div>\n            {#if order.status===\"delivering\"}\n              <div style=\"padding-top: 10px;\">\n                <Map lat={userLatitude} long={userLongitude}/>\n              </div>\n            {/if}\n            {#if order.status===\"at customer\"}\n            <button class=\"button is-primary is-fullwidth is-large\" on:click={processPickupRequest}>\n              <strong>REQUEST PICKUP</strong>\n            </button>\n            {/if}\n          {/if}\n\n\n\n        </div>\n      </div>\n\n    {/if}\n\n\n  </div>\n</div>\n\n<style>\n.card {\n  border-radius: 5px;\n}\n\n.card-image{\n  cursor: pointer;\n  border-top-right-radius: 5px;\n  border-top-left-radius: 5px;\n  background-color: #cccccc;\n}\na{\n  text-decoration: none;\n}\n\n</style>\n"
  ],
  "names": [],
  "mappings": "AAeE,CAAC,cAAC,CAAC,AACD,cAAc,CAAE,SAAS,CACzB,eAAe,CAAE,SAAS,CAC1B,OAAO,CAAE,IAAI,AACf,CAAC;ACgGF,IAAI,cAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,AACZ,CAAC,AAED,EAAE,cAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACjB,CAAC,AAUD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,cAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;ACjCD,uBAAS,CAAC,AACT,IAAI,CAAE,EAAE,AACT,CAAC;AC1BF,sBAAQ,CAAC,AACP,aAAa,CAAE,KAAK,CACpB,OAAO,IAAI,AACb,CAAC;ACqBA,uBAAS,CAAC,AACT,IAAI,CAAE,EAAE,AACT,CAAC;AC/EA,WAAW,cAAC,CAAC,AACX,WAAW,CAAE,GAAG,AAClB,CAAC;ACuGH,IAAI,cAAC,CAAC,AACJ,KAAK,CAAE,IAAI,AACb,CAAC;ACpFD,GAAG,eAAC,CAAC,AACH,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,CAAC,CACR,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CAC3B,UAAU,CAAE,IAAI,CACjB,KAAK,CAAE,GAAG,CACT,OAAO,CAAE,GAAG,AACd,CAAC;ACwED,IAAI,cAAC,CAAC,AACJ,KAAK,CAAE,IAAI,AACb,CAAC;ACgLD,KAAK,cAAC,CAAC,AACL,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,yBAAW,CAAC,AACV,MAAM,CAAE,OAAO,CACf,uBAAuB,CAAE,GAAG,CAC5B,sBAAsB,CAAE,GAAG,CAC3B,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AACD,eAAC,CAAC,AACA,eAAe,CAAE,IAAI,AACvB,CAAC"
}